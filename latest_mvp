import bpy


def assign_children_to_parent(choose):
  
    parent_ = bpy.data.objects.get(choose["parent"])
  
  
    #if child list isnt empty and parent object exists
    if choose["child"] and parent_:
        
        #scroll through all children by name
        for i in range(len(choose["child"])):
    
            child_ = bpy.data.objects.get(choose["child"][i]) 
            
            #if child exists:
            if child_:
                child_.parent = parent_
                child_.matrix_parent_inverse = parent_.matrix_world.inverted()


def deparent_children(bad_name):
    child_ = bpy.data.objects[bad_name]
    child_.parent = None
    

#Toggle between true and false
code = 0

if bool(code):
    parenter_chain = [{"parent": "Cube", "child": ["Cube.001"]},{"parent": "Cube", "child": ["Cube.005"]}]
    
    for obj in parenter_chain:
        assign_children_to_parent(obj)     
else:
 
    for x in bpy.context.selected_objects:
        deparent_children(x.name)
